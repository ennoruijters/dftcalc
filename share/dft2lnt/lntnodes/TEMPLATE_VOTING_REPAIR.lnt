module TEMPLATE_VOTING_REPAIR(TEMPLATE_COMMON_REPAIR) is

	process VOTING_K [FAIL : NAT_CHANNEL, ACTIVATE : NAT_BOOL_CHANNEL, ONLINE : NAT_CHANNEL] (threshold : NAT, total : NAT, received : BOOL_ARRAY, activated : BOOL_ARRAY, repairable : NAT) is
	var
		nr : NAT,
		done : BOOL,
		running : BOOL,
		nr_failed : NAT,
		nr_act : NAT
	in
		done := FALSE;
		nr_failed := 0;
		nr_act := 0;
		running := FALSE;
		loop
			select
			
			(*
			 * Listen for any child to be triggered.
			 * If this happens, we remember this by setting the boolean
			 * in the received array to TRUE. We also decrement the threshold.
			 *)
				FAIL (?nr) where (0 < nr) and (nr <= total);
				if not (received[nr]) then
					received[nr] := TRUE;
					nr_failed := nr_failed + 1
				end if;
				nr := 0
			
			(*
			 * If the threshold reaches 0, this means the threshold number
			 * of children have failed out of the total number of children.
			 * Thus, the Voting node fails and notifies its parents.
			 *)
			[]
				if (nr_failed >= threshold) and not (done) then
					FAIL (!0 of NAT); 
					done := TRUE
				end if;
				nr := 0
				
			-- increase decrease failed components if component gets repaired
			[]
				ONLINE (?nr) where (0 < nr) and (nr <= repairable) ;
				if((received[nr])) then
					received[nr] := FALSE;
					if(nr_failed > 0) then
						nr_failed := nr_failed - 1
					end if
				end if;
				nr := 0
				
			-- send up signal if voting is working again
			[]
				if((done) and (nr_failed < threshold)) then 
					done := FALSE;
					ONLINE(!0 of NAT)
				end if;
				nr := 0

			(*
			 * If this node is activated, enable the activation procedure.
			 *)
			[]
				ACTIVATE (?nr,FALSE) where nr == (0 of NAT);
				if (nr_act == 0 of NAT) then
					nr_act := 1 of NAT;
					running := TRUE
				end if
			
			(*
			 * If the children should be activated, do so, one by one,
			 * from left to right.
			 *)
			[]
				if (nr_act > 0 and running) then
					if (not (activated[nr_act])) then
						activated[nr_act] := TRUE;
						ACTIVATE (!nr_act,TRUE)
					end if;
					if nr_act < total  then
						nr_act := nr_act + 1
					else
						nr_act := 0
					end if
				end if

			end select
		end loop
	end var
	end process


end module 

