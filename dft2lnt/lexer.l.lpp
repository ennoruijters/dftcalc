/*
 * lexer.l.lpp
 *
 * Part of dft2lnt library - a library containing read/write operations for DFT
 * files in Galileo format and translating DFT specifications into Lotos NT.
 *
 * @author Freark van der Berg and extended by Dennis Guck
 */

%option reentrant
%option bison-bridge
%option bison-locations
/*%option noyywrap*/
%option yylineno
%option extra-type="Parser*"

/* Inserted in .c and .h */
%top{
	#ifndef __PARSER_Y_HPP
	#define __PARSER_Y_HPP
	#	include "parser.y.hpp"
	#endif
}

%{
	#include <stdio.h>
	#include <cstring>
	#include <climits>
	#include <string>
	//#ifndef __PARSER_Y_HPP
	//#define __PARSER_Y_HPP
	//#endif
	#include <ctype.h>
	#define YY_USER_ACTION  { Parser* currentParser = NULL; yylloc->advanceCharacters(yyleng); /*LOCATION_PRINT(stderr,yylloc); printf("\n");*/ }
	#define YY_USER_INIT { yylloc->reset(); }
	#define COMPILING_LEXER
	#include "dft_types.h"
	#include "dft_parser.h"
	char *my_strdup(const char *str);
	int lex_char(yyscan_t yyscanner);
	#define compiler_lexer_report_error(str) currentParser->getCC()->reportErrorAt(*yylloc,str)
	#define compiler_lexer_report_warning(str) currentParser->getCC()->reportWarningAt(*yylloc,str)
	#define compiler_lexer_report_errorAt(loc,str) { /*printf("@%i: ",__LINE__);*/ currentParser->getCC()->reportErrorAt(loc,str); }
	#define compiler_lexer_report_warningAt(loc,str) { currentParser->getCC()->reportWarningAt(loc,str); }

	#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ > 5)
	#	define PRAGMA_IGNORE_UNUSED 1
	#else
	#	define PRAGMA_IGNORE_UNUSED 0
	#endif

	// The parameter currentParser is not always used, so ignore warning
	#if PRAGMA_IGNORE_UNUSED
	#	pragma GCC diagnostic push
	#	pragma GCC diagnostic ignored "-Wunused-variable"
	#endif

	class StringLex {
	private:
		char* str;
		int strlen;
		int strmax;

	public:
		StringLex(): str(NULL), strlen(0), strmax(0) {
		}
		void addChar(char c, int windowSize) {
			assert(strlen <= strmax);
			if(strlen>=strmax) {
				strmax = strlen + windowSize;
				str = (char*)realloc(str,strmax);
			}
			str[strlen++] = c;
		}

		void addChar(char c) {
			addChar(c,10);
		}

		char* finalize() {
			addChar('\0',1);
			char* s = str;
			resetNoFree();
			return s;
		}

		void resetNoFree() {
			str = NULL;
			strlen = 0;
			strmax = 0;
		}

		void reset() {
			if(str) free(str);
			str = NULL;
			strlen = 0;
			strmax = 0;
		}
	};
%}

underscore    [_]
digit         [0-9]
letter        [A-Za-z]
posnumber     {digit}+
number        [-+]?{posnumber}
rate          {posnumber}([.]{posnumber})?((e|E){number})?
number_exp    e|E
voting        {number}of{number}
inspection    {number}?insp{rate}
replacement   {number}rep{rate}
hexdigit	  {digit}|[A-F]
newline       \r?\n
whitespace    [ \t]+
hexnumber     {hexdigit}+h
address       0x{hexdigit}+
identifier    ({letter}|{underscore})({letter}|{underscore}|{digit})*
char          [L]?[']
pp_include    {preproc}{whitespace}?include
pp_line       {preproc}line
preproc       [#]
comment_line  [\/][\/][^\n\r]*{newline}
comment_block [\/][*][A][*][\/]
string_begin  [L]?["]
string_end    ["]
real          {number}([.]{posnumber})?
real_exp      {real}({number_exp}{real})?
transfer      "accepts transfers from"

%x IN_STRING
%x IN_NUMBER

%%
%{
	Parser* currentParser = (Parser*)yyextra;
	StringLex strlex;
	/* At each yylex invocation, mark the current position as the
	 * start of the next token.
	*/
	yylloc_param->step();
	int firstNumber = 0;
	char firstNumber_c[301];
%}

{pp_line} {
	int c;
	while( (c = yyinput(yyscanner)) == ' ' ) {
	}

	char buffer[300];
	int buflen = 0;
	buffer[buflen++] = c;
	while( (c = yyinput(yyscanner)) != ' ' ) {
		buffer[buflen++] = c;
	}
	buffer[buflen] = '\0';
	int line = atoi(buffer);

	buflen = 0;
	if( (c = yyinput(yyscanner)) && c != '"') {
		buffer[buflen++] = c;
	}
	while( (c = yyinput(yyscanner)) != ' ' && c != EOF && c != '\r' && c != '\n' ) {
		buffer[buflen++] = c;
	}
	if(buffer[buflen-1]=='"') {
		buffer[buflen-1] = '\0';
	} else {
		buffer[buflen] = '\0';
	}

	//printf("found #line %i %s\n",line,buffer);
	yylloc->set(std::string(buffer),line);
}

"/*" {
	int c;

	for(;;) {
		while( (c = yyinput(yyscanner)) != '*' && c != EOF && c != '\r' && c != '\n' ) {
		}

		if(c == '*') {
			while( (c = yyinput(yyscanner)) == '*' ) {
			}
			if(c == '/')
				break;    /* found the end */
		} else if(c == '\r') {
			c = yyinput(yyscanner);
			yylloc->advanceLines(1);
			if(c != '\n' && c != EOF)
				unput(c);
		} else if( c == '\n') {
			yylloc->advanceLines(1);
		}

		if(c == EOF) {
			compiler_lexer_report_warning("EOF in comment");

			unput(c);
			break;
		}
	}
}

{comment_line}          yylloc->advanceLines(1); /*yylloc->step();*/
 /*{hexnumber}             sscanf(yytext,"%X",&yylval.number); return HEXNUMBER;*/
 /*{address}               yylval.address = my_strdup(yytext+2); return ADDRESS;*/
{newline}               yylloc->advanceLines(1); yylloc->step();
{whitespace}            yylloc->step(); /* ignore whitespace */;

{voting} {
	char buffer[101];

	// Read first number (threshold)
	char* dst = buffer;
	char* src = yytext;
	while(isdigit(*src)) {
		*dst++ = *src++;
	}
	*dst = '\0';
	yylval->voting.k = atoi(buffer);

	// Read second number (total)
	dst = buffer;
	src+=2;
	while(isdigit(*src)) {
		*dst++ = *src++;
	}
	*dst = '\0';
	yylval->voting.n = atoi(buffer);

	return VOTING;
}
{inspection} {
	unsigned long n;
	char *insp;
	yylval->inspection = new Inspection;
	if (*yytext != 'i') {
		// Read the number of phases before the 'insp' part.
		n = strtoul(yytext, &insp, 10);
		if (n > INT_MAX || n == ULONG_MAX) {
			compiler_lexer_report_warning("Too many phases in inspection");
			n = 0;
		}
		yylval->inspection->n = n;
	} else {
		yylval->inspection->n = 0;
		insp = yytext;
	}

	// Read the rate after the 'insp' part.
	insp += 4;
	yylval->inspection->k = decnumber<>(insp);

	return INSPECTION;
}
{replacement} {
    char buffer[101];
    
    // Read first number (phases)
    char* dst = buffer;
    char* src = yytext;
    while(isdigit(*src)) {
        *dst++ = *src++;
    }
    *dst = '\0';
    yylval->replacement.n = atoi(buffer);
    
    // Read second number (lambda)
    dst = buffer;
    src+=4;
    while(ispunct(*src) || isdigit(*src)) {
        *dst++ = *src++;
    }
    *dst = '\0';
    yylval->replacement.k = atof(buffer);
    
    return REPLACEMENT;
}

{real_exp} {
	double in;
	sscanf(yytext,"%lf",&in);
	yylval->realOrig = new RealWithString();
	yylval->realOrig->val = in;
	yylval->realOrig->str_val = std::string(yytext);
	return REAL;
}

<INITIAL>{string_begin} {
	BEGIN(IN_STRING);
	strlex.reset();
}

<IN_STRING>{
	{string_end} {
		BEGIN(INITIAL);
		yylval->c_string = strlex.finalize();
		return STRING;
	}
	\n {
	}

	\\[0-7]{1,3} {
		int result;

		// Get integer representation of octal number
		sscanf( yytext + 1, "%o", &result );

		// Verify octal number is <256
		if ( result > 0xff ) {

		}

		// Add character representation of octal number
		strlex.addChar((char)result);
	}

	\\[0-9]+ {
		// Unknown numerical escape sequence
	}

	\\n strlex.addChar('\n');
	\\r strlex.addChar('\r');
	\\b strlex.addChar('\b');
	\\t strlex.addChar('\t');
	\\f strlex.addChar('\f');
	\\a strlex.addChar('\a');
	\\v strlex.addChar('\v');
	\\? strlex.addChar('\?');

	\\(.|\n) {
		strlex.addChar(yytext[1]);
	}

	[^\\\n\"]+ {
		char *yptr = yytext;

		// Copy text
		while ( *yptr ) {
			strlex.addChar(*yptr++);
		}
	}
} // Close scope: IN_STRING

{char} {
	int c = yyinput(yyscanner);
	if(c == '\\') {
		yylval->character = lex_char(yyscanner);
		c = yyinput(yyscanner);
		if(c!='\'') {
			compiler_lexer_report_error("char not terminated");
			unput(c);
		}
	} else if(c == '\'') {
		yylval->character = 0;
	} else {
		yylval->character = c;
		c = yyinput(yyscanner);
		if(c!='\'') {
			compiler_lexer_report_error("char not terminated");
			unput(c);
		}
	}
	return CHAR;
}

;                       return(SEMICOLON);
=                       return(EQUALS);
-                       return(MINUS);

toplevel                return(TOPLEVEL);
page                    return PAGE;
phase                   return PHASE;

 /* gates */
phasedor                { yylval->c_string=my_strdup(yytext); return PHASEDOR; }
or                      { yylval->c_string=my_strdup(yytext); return OR;       }
and                     { yylval->c_string=my_strdup(yytext); return AND;      }
sand                    { yylval->c_string=my_strdup(yytext); return SAND;     }
hsp                     { yylval->c_string=my_strdup(yytext); return HSP;      }
wsp                     { yylval->c_string=my_strdup(yytext); return WSP;      }
csp                     { yylval->c_string=my_strdup(yytext); return CSP;      }
pand                    { yylval->c_string=my_strdup(yytext); return PAND;     }
por                     { yylval->c_string=my_strdup(yytext); return POR;      }
seq                     { yylval->c_string=my_strdup(yytext); return SEQ;      }
of                      { yylval->c_string=my_strdup(yytext); return OF;       }
fdep                    { yylval->c_string=my_strdup(yytext); return FDEP;     }
ru                      { yylval->c_string=my_strdup(yytext); return RU;       }
ru_f                    { yylval->c_string=my_strdup(yytext); return RU_F;     }
ru_p                    { yylval->c_string=my_strdup(yytext); return RU_P;     }
ru_nd                   { yylval->c_string=my_strdup(yytext); return RU_ND;    }
insp                    { yylval->c_string=my_strdup(yytext); return INSP;     }
rep                     { yylval->c_string=my_strdup(yytext); return REP;      }
{transfer}              { yylval->c_string=my_strdup(yytext); return TRANSFER; }

 /* Attributes */
prob                    { yylval->c_string=my_strdup(yytext); return PROB;   }
lambda                  { yylval->c_string=my_strdup(yytext); return LAMBDA; }
rate                    { yylval->c_string=my_strdup(yytext); return RATE;   }
shape                   { yylval->c_string=my_strdup(yytext); return SHAPE;  }
mean                    { yylval->c_string=my_strdup(yytext); return MEAN;   }
stddev                  { yylval->c_string=my_strdup(yytext); return STDDEV; }
cov                     { yylval->c_string=my_strdup(yytext); return COV;    }
res                     { yylval->c_string=my_strdup(yytext); return RES;    }
repl                    { yylval->c_string=my_strdup(yytext); return REPL;   }
dorm                    { yylval->c_string=my_strdup(yytext); return DORM;   }
aph                     { yylval->c_string=my_strdup(yytext); return APH;    }
phases                  { yylval->c_string=my_strdup(yytext); return PHASES; }
maintain                { yylval->c_string=my_strdup(yytext); return MAINTAIN;}
repair                  { yylval->c_string=my_strdup(yytext); return REPAIR; }
prio                    { yylval->c_string=my_strdup(yytext); return PRIO;   }
interval                { yylval->c_string=my_strdup(yytext); return INTERVAL;}

{identifier} {
	yylval->c_string=my_strdup(yytext);
	return IDENTIFIER;
}

%%
char *my_strdup(const char *str) {
	size_t len = strlen(str);
	char *x = (char*)malloc(len+1); /* 1 for the null terminator */
	if(!x) return NULL; /* malloc could not allocate memory */
	memcpy(x,str,len+1); /* copy the string into the new buffer */
	return x;
}

int lex_char(yyscan_t yyscanner) {
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	Parser* currentParser = yyextra;\
	int c = yyinput(yyscanner);

		if(c == EOF) {
		} else if(c == '\\') {
		} else if(c == '\'') {
		} else if(c == '"') {
		} else if(c == 'n') {
			c = '\n';
		} else if(c == 'r') {
			c = '\r';
		} else if(c == 'b') {
			c = '\b';
		} else if(c == 't') {
			c = '\t';
		} else if(c == 'f') {
			c = '\f';
		} else if(c == 'a') {
			c = '\a';
		} else if(c == 'v') {
			c = '\v';
		} else if(c == '?') {
			c = '\?';
		} else if(isdigit(c)) {
			char buffer[101];
			int buflen = 0;
			do {
				if(buflen>=100) {
					compiler_lexer_report_error("octal number in string too long");
					break;
				}
				buffer[buflen++] = c;
				c = yyinput(yyscanner);
			} while(isdigit(c));
			unput(c);
			buffer[buflen] = 0;
			sscanf(buffer,"%o",&c);
		} else if(c == 'x') {
			char buffer[101];
			int buflen = 0;
			while( (c = yyinput(yyscanner)) && isdigit(c) ) {
				if(buflen>=100) {
					compiler_lexer_report_error("hexadecimal number in string too long");
					break;
				}
				buffer[buflen++] = c;
			}
			unput(c);
			buffer[buflen] = 0;
			sscanf(buffer,"%X",&c);
		}
	return c;
}
#if PRAGMA_IGNORE_UNUSED
#	pragma GCC diagnostic pop
#endif
